#!/usr/bin/env -S node --experimental-modules --no-warnings -r dotenv/config
'use strict';
import { Gearman as Rpc, RpcError } from '../lib/rpc.mjs';
import gear from '../lib/gear.mjs';
import log from '../lib/util/log.mjs';
import ms from 'ms';
import noop from '../lib/util/noop.mjs';
import yargs from 'yargs';
import chrono from 'chrono-node';

function outputOption (yargs) {
  return yargs
    .option('output', { alias: 'O', describe: 'output handling', choices: ['inspect', 'json', 'nl-json', 'plain'], default: 'inspect' });
}

function baseRunArgs (yargs) {
  return outputOption(yargs)
    .positional('name', { describe: 'method name' })
    .option('priority', { alias: 'P', describe: 'normal, high, low', default: 'normal' })
    .option('disambiguator', { alias: 'D', describe: 'identifier that ensures no two jobs with the same one run at the same time' })
    .option('after', { describe: 'schedule for after a certain time' })
    .option('after-job', { describe: 'schedule for after a certain job (by id) has completed' })
    .option('retries', { describe: 'retry a job N times before giving up', default: 0 })
    .option('retry-delay', { describe: 'with --retries, the delay in seconds between retries', default: 1 })
    .option('json', { alias: 'J', describe: 'always parse args as JSON', default: false, type: 'boolean' })
    .demandOption(['name']);
}

function parseRunArgs (argv) {
  let {
    name,
    priority,
    disambiguator,
    after: after_date,
    'after-job': after_id,
    retries: max_retries,
    'retry-delay': retry_delay
  } = argv;

  name = name.replace('/', '\\');

  if (after_date) {
    after_date = chrono.parseDate(after_date).toJSON();
  }

  if (after_id) {
    after_id = parseInt(after_id, 10);
    if (after_id <= 0) after_id = null;
  }

  if (max_retries !== 0) {
    max_retries = parseInt(max_retries, 10);
    if (max_retries < 0) max_retries = 0;
  }

  if (retry_delay !== 1) {
    retry_delay = parseInt(retry_delay, 10);
    if (retry_delay < 0) retry_delay = 0;
  }

  let args;
  if (argv.json) {
    if (argv.args.length === 1) {
      args = JSON.parse(argv.args[0]);
    } else {
      args = argv.args.map(a => JSON.parse(a));
    }
  } else if (argv.args.some(a => a.toString().includes('='))) {
    args = {};
    for (const [k, v = null] of argv.args.map(a => a.split('=', 2))) { args[k] = v || args[k] || null; }
  }

  if (!args) args = argv.args;

  return {
    name,
    priority,
    args,
    disambiguator,
    after_date,
    after_id,
    max_retries,
    retry_delay,
  };
}

async function run (argv) {
  const start = new Date();
  const rpc = new Rpc(gear());

  if (argv.priority === 'normal') argv.priority = null;
  const { name, args } = argv;
  delete argv.name;
  delete argv.args;

  try {
    const data = await rpc.request(name, args, argv);
    return data;
  } catch (err) {
    log.err('<== Received an error');
    if (err instanceof RpcError) {
      const re = err.toJSON().error;
      log.crit('code:', re.code);
      log.crit('message:', re.message);
      if (re.data) log.crit('data:', re.data);
    } else {
      log.crit(err);
    }
  } finally {
    log.err('=== Took', ms(new Date - start));
  }

  process.exit(1);
}

function wrap (fn) {
  return async (...args) => {
    try {
      await fn(...args);
    } catch (err) {
      log.crit(err);
    }
  };
}

function controlledOutput (output, result) {
  if (result !== null) switch (output) {
    case 'inspect':
      log.out(result);
      break;

    case 'json':
      log.out(JSON.stringify(result));
      break;

    case 'nl-json':
      if (Array.isArray(result))
        for (const line of result)
          log.out(JSON.stringify(line));
      else
        log.out(JSON.stringify(result));
      break;

    case 'plain':
      if (Array.isArray(result) || typeof result === 'object')
        log.out(JSON.stringify(result));
      else
        log.out(`${result}`);
      break;
  }
}

noop(yargs
  .strict()
  .option('quiet', { alias: 'q', describe: 'output minimally', type: 'boolean' })
  .command('queue <name> [args...]', 'Queue a job', yargs => {
    baseRunArgs(yargs);
  }, wrap(async argv => {
    if (argv.quiet) log.quiet();
    const args = parseRunArgs(argv);
    log.err(`==> Queueing ${args.name} with ${args.priority || 'normal'} priority`);
    log.err('==> Arguments:', args.args);
    const jobid = await run({ name: 'gearbox\\core::queue', args });
    log.werr('<== Job ID: ');
    log.out(jobid);
  }))
  .command('watch <id>', 'Watch a job', yargs => {
    yargs
      .positional('id')
      // .option('timeout', { describe: 'stop watching after N seconds', type: 'number' })
      .option('wait-for-id', { describe: 'don’t error if the id doesn’t exist yet', type: 'boolean' })
      .demandOption('id');
  }, wrap(async argv => {
    if (argv.quiet) log.quiet();
    const { id, waitForId: wait_for_id } = argv;
    log.err(`==> Watching job ${id}`);
    const result = await run({ name: 'gearbox\\core::watch', args: { id, wait_for_id } });
    controlledOutput(argv.output, result);
  }))
  .command('raw <name> [args...]', 'Run an RPC job directly', yargs => {
    baseRunArgs(yargs);
  }, wrap(async argv => {
    if (argv.quiet) log.quiet();
    const args = parseRunArgs(argv);
    log.err(`==> Running ${args.name} with ${args.priority || 'normal'} priority`);
    log.err('==> Arguments:', args.args);
    const result = await run(args);
    controlledOutput(argv.output, result);
  }))
  .command('status [id...]', 'Get the status of all current jobs, or of specific jobs', yargs => {
    outputOption(yargs);
  }, wrap(async argv => {
    if (argv.quiet) log.quiet();
    const result = await run({ name: 'gearbox\\core::status', args: argv.id || [] });
    controlledOutput(argv.output, result);
  }))
  .demandCommand(1, 'Missing command')
  .argv);
